(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{326:function(s,a,e){"use strict";e.r(a);var n=e(0),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"_3-2-访问数组元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-访问数组元素"}},[s._v("#")]),s._v(" 3.2 访问数组元素")]),s._v(" "),e("p",[s._v("数组创建完成后，再来说说如何访问数组的元素。访问数组元素感觉上很像从字符串中获取某个字符的形式，激励如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('> classA[0]\n< "alex"\n> classA[3]\n< "eno"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("和字符串中的字符一样，数组名后面会有一个方括号，方括号中会有一个数字，这个数字就是对应的数组元素的位置。当然这个位置也是从0开始计算的。所以当我们访问classA中第0个位置的数据时，返回的是alex(第一个名字)；而当我们访问classA中第3个位置的数据时，返回的是eno（第4个名字）。")]),s._v(" "),e("p",[s._v("因为这个数组中的元素都是字符串，所以单个元素也具有字符串的特性，能够使用字符串的方法，也能通过方括号获取名字中的每个字母。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('> classA[3][2]\n< "o"\n> classA[3].tuUpperCase()\n< "ENO"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这里classA[3]指的是数组classA中的第3个元素（第4个名字），而这个元素中的第2个位置（第3个字母）则是o，在控制台中写出来就是classA[3][2]。之后我们应用字符串的方法toUpperCase将元素classA[3]的字符都变为了大写的。")])])}),[],!1,null,null,null);a.default=t.exports}}]);